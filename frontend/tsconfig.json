{
    "compilerOptions": {
        "target": "ES2020",
        "useDefineForClassFields": true,
        "lib": ["ES2020", "DOM", "DOM.Iterable"],
        "module": "ESNext",
        "skipLibCheck": true,
        "baseUrl": ".",
        "paths": {
            "@/*": ["./src/*"]
        },

        /* Bundler mode */
        "moduleResolution": "bundler",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "noEmit": true,
        "jsx": "react-jsx",
        "forceConsistentCasingInFileNames": true,
        "allowImportingTsExtensions": false,

        /* Configuration needed for apollo-upload-client
           (see https://github.com/jaydenseric/apollo-upload-client?tab=readme-ov-file#requirements) */
        "allowJs": true,
        "maxNodeModuleJsDepth": 10,

        /* Linting */
        "strict": true,
        "noImplicitAny": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "noFallthroughCasesInSwitch": true,

        /* gql.tada */
        "plugins": [
            {
                "name": "gql.tada/ts-plugin",
                "schema": "./schema.graphql",
                "tadaOutputLocation": "./src/graphql-env.d.ts",

                /* For simplicity’s sake at present, we’re using only a single canonical fragment for each type.
                   Usually, these checks would ensure that we’re fetching only the data we actually use, and that
                   we actually use any fragments co-located with a component.  As a project grows larger, this is
                   definitely a good practice that we would want to adopt. */
                "trackFieldUsage": false,
                "shouldCheckForColocatedFragments": false,
            }
        ]
    },
    "include": ["src/**/*.tsx", "src/**/*.ts", "src/**/*.d.ts", "playwright.config.ts"],
}
