name: Backend

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    # Use container for act (local testing), setup-php for GitHub Actions (faster)
    container: ${{ vars.USE_CONTAINER && 'php:8.3-cli' || '' }}

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # For act (local testing): Install PHP extensions in container
      - name: Install PHP extensions
        if: ${{ vars.USE_CONTAINER }}
        run: |
          apt-get update
          apt-get install -y libpq-dev zip unzip git libpng-dev libjpeg-dev libfreetype6-dev
          docker-php-ext-configure gd --with-freetype --with-jpeg
          docker-php-ext-install pdo pgsql pdo_pgsql gd

      - name: Install Composer
        if: ${{ vars.USE_CONTAINER }}
        run: |
          curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

      # For GitHub Actions: Use fast setup-php action
      - name: Set up PHP
        if: ${{ !vars.USE_CONTAINER }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: pdo, pgsql, gd
          coverage: none

      - name: Install dependencies
        working-directory: backend
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Create minimal .env file
        working-directory: backend
        run: |
          echo "APP_ENV=testing" > .env
          echo "APP_KEY=" >> .env
          echo "JWT_SECRET=" >> .env

      - name: Generate application key
        working-directory: backend
        run: php artisan key:generate --force

      - name: Generate JWT secret
        working-directory: backend
        run: php artisan jwt:secret --force

      - name: Run migrations
        working-directory: backend
        run: php artisan migrate --force
        env:
          APP_ENV: testing
          DB_CONNECTION: pgsql_test
          DB_HOST: ${{ vars.USE_CONTAINER && 'postgres' || 'localhost' }}
          DB_PORT: 5432
          DB_DATABASE: test
          DB_USERNAME: test
          DB_PASSWORD: secret

      - name: Run tests
        working-directory: backend
        run: vendor/bin/phpunit
        env:
          APP_ENV: testing
          DB_CONNECTION: pgsql_test
          DB_HOST: ${{ vars.USE_CONTAINER && 'postgres' || 'localhost' }}
          DB_PORT: 5432
          DB_DATABASE: test
          DB_USERNAME: test
          DB_PASSWORD: secret

  deploy:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: tests
    # Only deploy on push to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        working-directory: backend
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
