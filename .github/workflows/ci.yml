name: CI
on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-backend:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "tag=ghcr.io/${OWNER}/backend:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build image
        run: docker build -t ${{ steps.meta.outputs.tag }} backend/

      - name: Save image for tests
        if: ${{ !env.ACT }}
        run: docker save ${{ steps.meta.outputs.tag }} -o backend.tar

      - name: Upload backend image artifact
        uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: backend-image
          path: backend.tar

  backend-tests:
    name: Run backend tests
    runs-on: ubuntu-latest
    needs: build-backend
    env:
      COMPOSE_CMD: docker compose -p ${{ github.job }} -f docker-compose.ci.yml
      BACKEND_IMAGE: ${{ needs.build-backend.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend image artifact
        uses: actions/download-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: backend-image

      - name: Load Docker image
        if: ${{ !env.ACT }}
        run: docker load -i backend.tar

      - name: Start services
        run: $COMPOSE_CMD up -d

      - name: Wait for backend to be ready
        run: bash .github/scripts/wait-for-backend.sh

      - name: Wait for database to be ready
        run: bash .github/scripts/wait-for-db.sh

      - name: Install test dependencies
        run: $COMPOSE_CMD exec -T backend composer install

      - name: Run migrations
        run: $COMPOSE_CMD exec -T backend php artisan migrate --force

      - name: Run tests
        run: $COMPOSE_CMD exec -T backend ./vendor/bin/phpunit

      - name: Stop services
        if: always()
        run: $COMPOSE_CMD down -v

  e2e-tests:
    name: Run E2E tests
    runs-on: ubuntu-latest
    needs: build-backend
    env:
      COMPOSE_CMD: docker compose -p ${{ github.job }} -f docker-compose.ci.yml -f docker-compose.e2e.yml
      BACKEND_IMAGE: ${{ needs.build-backend.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend image artifact
        uses: actions/download-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: backend-image

      - name: Load Docker image
        if: ${{ !env.ACT }}
        run: docker load -i backend.tar

      - name: Start backend services
        run: $COMPOSE_CMD up -d

      - name: Wait for backend to be ready
        run: bash .github/scripts/wait-for-backend.sh

      - name: Wait for database to be ready
        run: bash .github/scripts/wait-for-db.sh

      - name: Run migrations
        run: $COMPOSE_CMD exec -T backend php artisan migrate --force

      - name: Run E2E tests in container
        run: $COMPOSE_CMD run --rm frontend

      - name: Keep container alive for debugging
        if: failure()
        run: |
          echo "Starting a shell container for debugging (60 seconds)..."
          echo "Get a shell with: BACKEND_IMAGE=${{ needs.build-backend.outputs.image_tag }} docker compose -p e2e-tests -f docker-compose.ci.yml -f docker-compose.e2e.yml run --rm frontend bash"
          sleep 60

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Stop services
        if: always()
        run: $COMPOSE_CMD down -v

  deploy-backend:
    name: Deploy backend to Fly.io
    runs-on: ubuntu-latest
    needs: [build-backend, backend-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Backend

      - name: Download backend image artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image

      - name: Load Docker image
        run: docker load -i backend.tar

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GHCR
        run: docker push ${{ needs.build-backend.outputs.image_tag }}

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io using GHCR image
        run: flyctl deploy --image ${{ needs.build-backend.outputs.image_tag }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        working-directory: ./backend

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: ${{ steps.deployment.outputs.env }}
          env_url: https://api.dam.kinematic.ch

  deploy-frontend:
    name: Deploy frontend to Vercel
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      deployments: write
    env:
      VERCEL_ORG_ID: ${{ vars.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ vars.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Frontend

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env: ${{ steps.deployment.outputs.env }}
          env_url: https://dam.kinematic.ch
