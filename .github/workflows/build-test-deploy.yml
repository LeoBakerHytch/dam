name: Build / Test / Deploy
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "tag=ghcr.io/${OWNER}/backend:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build image
        run: docker build -t ${{ steps.meta.outputs.tag }} backend/

      - name: Save image for tests
        if: ${{ !env.ACT }}
        run: docker save ${{ steps.meta.outputs.tag }} -o backend.tar

      - uses: actions/upload-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: backend-image
          path: backend.tar

  backend-tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        if: ${{ !env.ACT }}
        with:
          name: backend-image

      - name: Load Docker image
        if: ${{ !env.ACT }}
        run: docker load -i backend.tar

      - name: Create minimal .env file
        working-directory: backend
        run: |
          echo "APP_ENV=testing" > .env
          echo "APP_KEY=" >> .env
          echo "JWT_SECRET=" >> .env
          echo "DB_CONNECTION=pgsql_test" >> .env
          echo "DB_HOST=db_test" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=test" >> .env
          echo "DB_USERNAME=test" >> .env
          echo "DB_PASSWORD=secret" >> .env

      - name: Start services
        run: docker compose up -d
        env:
          BACKEND_IMAGE: ${{ needs.build-backend.outputs.image_tag }}

      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if docker compose exec -T backend php artisan --version 2>/dev/null; then
              echo "Backend is ready"
              exit 0
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          echo "Backend failed to start"
          exit 1

      - name: Generate application key
        working-directory: backend
        run: docker compose exec -T backend php artisan key:generate --force

      - name: Generate JWT secret
        working-directory: backend
        run: docker compose exec -T backend php artisan jwt:secret --force

      - name: Run migrations
        run: docker compose exec -T backend php artisan migrate --force

      - name: Run tests
        run: docker compose exec -T backend composer test

      - name: Stop services
        if: always()
        run: docker compose down
