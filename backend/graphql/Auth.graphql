type AccessToken {
    jwt: String!
    tokenType: String!
    expiresIn: Int!
}


extend type Mutation {
    Auth_Token_Issue(input: Auth_Token_Issue_Input!): Auth_Token_Issue_Response!
    @field(resolver: "App\\GraphQL\\Resolvers\\Auth_Token_Issue")
}

input Auth_Token_Issue_Input {
    email: String! @rules(apply: ["email"])
    password: String!
}

type Auth_Token_Issue_Response {
    accessToken: AccessToken!
    user: User!
}


extend type Mutation {
    Auth_Token_Refresh: Auth_Token_Refresh_Response!
        @field(resolver: "App\\GraphQL\\Resolvers\\Auth_Token_Refresh")
}

type Auth_Token_Refresh_Response {
    accessToken: AccessToken!
    user: User!
}


extend type Mutation {
    Auth_User_Register(input: Auth_User_Register_Input!): Auth_User_Register_Response!
    @field(resolver: "App\\GraphQL\\Resolvers\\Auth_User_Register")
    @validator(class: "App\\GraphQL\\Resolvers\\Auth_User_RegisterValidator")
}

input Auth_User_Register_Input {
    name: String!
    email: String!
    password: String!
}

type Auth_User_Register_Response {
    accessToken: AccessToken!
    user: User!
}


extend type Mutation {
    Auth_User_ChangePassword(input: Auth_User_ChangePassword_Input!): Auth_User_ChangePassword_Response!
    @field(resolver: "App\\GraphQL\\Resolvers\\Auth_User_ChangePassword")
    @validator(class: "App\\GraphQL\\Resolvers\\Auth_User_ChangePasswordValidator")
    @guard
}

input Auth_User_ChangePassword_Input {
    currentPassword: String!
    newPassword: String!
}

type Auth_User_ChangePassword_Response {
    success: Boolean!
    user: User!
}
