type AccessToken {
    jwt: String!
    tokenType: String!
    expiresIn: Int!
}


extend type Mutation {
    Auth_IssueToken(input: Auth_IssueToken_Input!): Auth_IssueToken_Response!
    @field(resolver: "App\\GraphQL\\Resolvers\\Auth_IssueToken")
}

input Auth_IssueToken_Input {
    email: String! @rules(apply: ["email"])
    password: String!
}

type Auth_IssueToken_Response {
    accessToken: AccessToken!
    user: User!
}


extend type Mutation {
    Auth_RefreshToken: Auth_RefreshToken_Response!
    @field(resolver: "App\\GraphQL\\Resolvers\\Auth_RefreshToken")
}

type Auth_RefreshToken_Response {
    accessToken: AccessToken!
    user: User!
}


extend type Mutation {
    Auth_Register(input: Auth_Register_Input!): Auth_Register_Response!
    @field(resolver: "App\\GraphQL\\Resolvers\\Auth_Register")
    @validator(class: "App\\GraphQL\\Resolvers\\Auth_RegisterValidator")
}

input Auth_Register_Input {
    name: String! @rules(apply: ["max:255"])
    email: String! @rules(apply: ["email", "max:255", "unique:users,email"])
    password: String!
}

type Auth_Register_Response {
    accessToken: AccessToken!
    user: User!
}


extend type Mutation {
    Auth_ChangePassword(input: Auth_ChangePassword_Input!): Auth_ChangePassword_Response!
    @field(resolver: "App\\GraphQL\\Resolvers\\Auth_ChangePassword")
    @validator(class: "App\\GraphQL\\Resolvers\\Auth_ChangePasswordValidator")
    @guard
}

input Auth_ChangePassword_Input {
    currentPassword: String!
    newPassword: String!
}

type Auth_ChangePassword_Response {
    user: User!
}
