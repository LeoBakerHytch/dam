extend type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

extend type Mutation {
    User_Register(input: User_Register_Input!): User_Register_Response!
        @field(resolver: "App\\GraphQL\\Resolvers\\User_Register")
        @validator(class: "App\\GraphQL\\Resolvers\\User_RegisterValidator")
}

input User_Register_Input {
    name: String!
    email: String!
    password: String!
}

type User_Register_Response {
    user: User!
}

"Account of a person who uses this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}
